imagePullPolicy: IfNotPresent
imagePullSecrets: []

read:
  replicaCount: 1
  image:
    repository: registry.cn-shanghai.aliyuncs.com/hsc-public/alerta-server
    tag: fa75125
  service:
    type: ClusterIP
    port: 8080
  env: []
  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 100
    targetCPUUtilizationPercentage: 80
    # targetMemoryUtilizationPercentage: 80
  ingress:
    enabled: false
    annotations: {}
      # kubernetes.io/ingress.class: nginx
      # kubernetes.io/tls-acme: "true"
    hosts:
      - host: chart-example.local
        paths:
          - /
    tls: []
    #  - secretName: chart-example-tls
    #    hosts:
    #      - chart-example.local
  route:
    enabled: false
    annotations: {}
    host: chart-example.local
    path: /
    tls:
      enabled: false

write:
  replicaCount: 1
  image:
    repository: registry.cn-shanghai.aliyuncs.com/hsc-public/alerta-server
    tag: fa75125
  service:
    type: ClusterIP
    port: 8080
  env: []
  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 100
    targetCPUUtilizationPercentage: 80
    # targetMemoryUtilizationPercentage: 80
  ingress:
    enabled: false
    annotations: {}
      # kubernetes.io/ingress.class: nginx
      # kubernetes.io/tls-acme: "true"
    hosts:
      - host: chart-example.local
        paths:
          - /
    tls: []
    #  - secretName: chart-example-tls
    #    hosts:
    #      - chart-example.local
  route:
    enabled: false
    annotations: {}
    host: chart-example.local
    path: /
    tls:
      enabled: false

web:
  replicaCount: 1
  image:
    repository: registry.cn-shanghai.aliyuncs.com/hsc-public/alerta-ui
    tag: 509db5e
  service:
    type: ClusterIP
    port: 8080
  env: []
  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 100
    targetCPUUtilizationPercentage: 80
    # targetMemoryUtilizationPercentage: 80
  ingress:
    enabled: false
    annotations: {}
      # kubernetes.io/ingress.class: nginx
      # kubernetes.io/tls-acme: "true"
    hosts:
      - host: chart-example.local
        paths:
          - /
    tls: []
    #  - secretName: chart-example-tls
    #    hosts:
    #      - chart-example.local
  route:
    enabled: false
    annotations: {}
    host: chart-example.local
    path: /
    tls:
      enabled: false

config:
  crosOrigins:
    - 'http://try.alerta.io'
    - 'http://explorer.alerta.io'
    - 'http://localhost'
    - 'http://localhost:8000'
    - r'https?://\w*\.?local\.alerta\.io:?\d*/?.*'
  endpoint: http://localhost/api

# Configuration values for the postgresql dependency
## ref: https://github.com/helm/charts/blob/master/stable/postgresql/README.md
##
postgresql:
  enabled: true
  postgresqlUsername: alerta
  postgresqlPassword: alerta
  postgresqlDatabase: alerta
  persistence:
    enabled: true
  service:
    port: 5432

database:
  url: postgres://alerta:alerta@localhost:5432/alerta

serviceAccount:
  # Specifies whether a service account should be created
  create: false
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

resources:
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  limits:
    cpu: 100m
    memory: 128Mi
  requests:
    cpu: 100m
    memory: 128Mi

nodeSelector: {}

tolerations: []

affinity: {}
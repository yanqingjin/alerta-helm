imagePullPolicy: IfNotPresent
imagePullSecrets: []

read:
  replicaCount: 1
  image:
    repository: registry.cn-shanghai.aliyuncs.com/hsc-public/alerta-server
    tag: 47a2ba9
  service:
    type: ClusterIP
    port: 8080
  env: []
  resources:
    limits:
      cpu: 500m
      memory: 512Mi
    requests:
      cpu: 200m
      memory: 256Mi
  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 100
    targetCPUUtilizationPercentage: 80
    # targetMemoryUtilizationPercentage: 80
  ingress:
    enabled: false
    annotations: {}
      # kubernetes.io/ingress.class: nginx
      # kubernetes.io/tls-acme: "true"
    hosts:
      - host: chart-example.local
        paths:
          - /
    tls: []
    #  - secretName: chart-example-tls
    #    hosts:
    #      - chart-example.local
  route:
    enabled: false
    annotations: {}
    host: chart-example.local
    path: /
    tls:
      enabled: false

write:
  replicaCount: 1
  image:
    repository: registry.cn-shanghai.aliyuncs.com/hsc-public/alerta-server
    tag: 47a2ba9
  service:
    type: ClusterIP
    port: 8080
  env: []
  resources:
    limits:
      cpu: 500m
      memory: 512Mi
    requests:
      cpu: 200m
      memory: 256Mi
  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 100
    targetCPUUtilizationPercentage: 80
    # targetMemoryUtilizationPercentage: 80
  ingress:
    enabled: false
    annotations: {}
      # kubernetes.io/ingress.class: nginx
      # kubernetes.io/tls-acme: "true"
    hosts:
      - host: chart-example.local
        paths:
          - /
    tls: []
    #  - secretName: chart-example-tls
    #    hosts:
    #      - chart-example.local
  route:
    enabled: false
    annotations: {}
    host: chart-example.local
    path: /
    tls:
      enabled: false

web:
  replicaCount: 1
  image:
    repository: registry.cn-shanghai.aliyuncs.com/hsc-public/alerta-ui
    tag: 509db5e
  service:
    type: ClusterIP
    port: 8080
  env: []
  resources:
    limits:
      cpu: 200m
      memory: 256Mi
    requests:
      cpu: 100m
      memory: 128Mi
  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 100
    targetCPUUtilizationPercentage: 80
    # targetMemoryUtilizationPercentage: 80
  ingress:
    enabled: false
    annotations: {}
      # kubernetes.io/ingress.class: nginx
      # kubernetes.io/tls-acme: "true"
    hosts:
      - host: chart-example.local
        paths:
          - /
    tls: []
    #  - secretName: chart-example-tls
    #    hosts:
    #      - chart-example.local
  route:
    enabled: false
    annotations: {}
    host: chart-example.local
    path: /
    tls:
      enabled: false

alertaAdminUsers:
  - admin
# alertaAdminPassword: "" # if not provided will be randomly generated
# alertaAdminKey: "<your_api_key_here>"

# ref: http://docs.alerta.io/en/latest/configuration.html
# alertaConfig: |
#   DEBUG = "True"
#   AUTH_REQUIRED = "True"
#   PLUGINS = ['normalise', 'enhance']
#   CORS_ORIGINS = ['http://localhost:8000', r'https?://\w*\.?local\.alerta\.io:?\d*/?.*']
#   DATABASE_URL: "" # provide db url here if you're not using the postgres chart

# ref: http://docs.alerta.io/en/latest/webui.html
# alertaWebConfig: |
# // contents of config.json
# {
#   "endpoint": "http://localhost/api"
# }

# Configuration values for the postgresql dependency
## ref: https://github.com/helm/charts/blob/master/stable/postgresql/README.md
##
postgresql:
  enabled: true
  postgresqlUsername: alerta
  postgresqlPassword: alerta
  postgresqlDatabase: alerta
  persistence:
    enabled: true
  service:
    port: 5432

serviceAccount:
  # Specifies whether a service account should be created
  create: false
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

nodeSelector: {}

tolerations: []

affinity: {}